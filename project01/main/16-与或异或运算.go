package main

import (
	"fmt"
)

/**
* 1. 对于有符号的数据, 二进制的最高位是符号位, 0表示正式, 1表示负数
* 2. 正数的源码, 补码, 反码是相同的
* 3. 负数的反码: 原码符号位不变, 其他位取反
* 4. 负数的补码: 等于负数的反码+1
* 5. 0的反码, 补码都是0
* 6. 计算机运算时, 都是以反码进行运算的, 如: 3-1 = 3 + (-1)
*
* 按位与(&): 使用补码运算, 两位全为1, 结果为1, 否则为0
* 按位或(|): 使用补码运算, 两位有一个为1, 其结果为1
* 按位异或(^): 使用补码运算, 一个为1一个为0, 其结果为1
 */
func main() {
	fmt.Println(2 & 3) // 0000 0010 & 0000 0011 = 0000 0010 => 2
	fmt.Println(2 | 3) // 0000 0010 | 0000 0011 = 0000 0011 => 3
	fmt.Println(2 ^ 3) // 0000 0010 ^ 0000 0011 = 0000 0001 => 1

	fmt.Println("============================")

	fmt.Println(-2 & 3) // 1111 1110 & 0000 0011 = 0000 0010 => -2
	fmt.Println(-2 | 3) // 1111 1110 | 0000 0011 = 1111 1111 => -128 != 3
	fmt.Println(-2 ^ 3) // 1111 1110 ^ 0000 0011 =  => 1
}
